#!/usr/bin/env python

'''
Dynamically generate SimSem features and classifiers.

Author:     Pontus Stenetorp    <pontus is s u-tokyo ac jp>
Version:    2011-04-07
'''

#TODO: Needs to generate the ensembles as well

### Stdlib imports
from argparse import ArgumentParser
from os.path import basename, splitext

### In package imports
from config import SIMSTRING_DB_PATHS

### Program imports

### Constants
ARGPARSER = ArgumentParser(description='XXX')
ARGPARSER.add_argument('target', choices=['features', 'classifiers'])

FEATURE_SET = 'SIMSTRING_FEATURES'
CLASSIFIER_SET = 'SIMSTRING_CLASSIFIERS'

GENERATED_WARNING_MESSAGE = '''
# !!!WARNING!!!
# THIS FILE IS AUTOMATICALLY GENERATED AND SHOULD NOT BE COMMITED INTO VERSION
# CONTROL OR MANUALLY EDITED. PLEASE REFER TO THE MODULE DOCUMENTATION FOR
# FURTHER DETAILS.
'''

SIMSTRING_FEATURES_HDR = '''
from abstract import AbstractSimStringFeature

### Constants
{feature_set} = set()
###
'''.format(feature_set=FEATURE_SET)

SIMSTRING_FEATURE_TEMPLATE = '''
class {class_prefix}SimStringFeature(AbstractSimStringFeature):
    def __init__(self):
        self.db_name = '{db_name}'
        self.type = 'distance'
{feature_set}.add({class_prefix}SimStringFeature)
'''

SIMSTRING_CLASSIFIERS_HDR = '''
from abstract import AbstractSimStringClassifier

### Constants
{feature_set} = set()
###
'''.format(feature_set=CLASSIFIER_SET)


SIMSTRING_CLASSIFIER_TEMPLATE = '''
from features import {feature_class}
class {class_prefix}SimStringClassifier(AbstractSimStringClassifier):
    def __init__(self):
        self.feature_class = {feature_class}
{classifier_set}.add({class_prefix}SimStringClassifier)
'''

# Characters to remove when camel-casing
#NOT_ALLOWED_IN_CAMEL_CASE = set((
#    '_',
#    '.',
#    ))
###

def _camel_case(string):
    pass #TODO:

def _db_name_to_class_prefix(db_path):
    return (splitext(basename(db_path))[0]
            .upper()
            .replace('.', '')
            .replace('_', '')
            .replace('-', '')
            )

def _simstring_feature_template(db_name):
    return SIMSTRING_FEATURE_TEMPLATE.format(
            class_prefix=_db_name_to_class_prefix(db_name),
            db_name=db_name,
            feature_set=FEATURE_SET
            )

def simstring_features_module_template(db_names):
    return '''
    {warning}
    {hdr}
    {features}
    '''.format(
            warning=GENERATED_WARNING_MESSAGE,
            hdr=SIMSTRING_FEATURES_HDR,
            features='\n'.join(
                (_simstring_feature_template(n) for n in db_names)
                )
            ).strip()

# TODO: XXX:  CLASSIFIERS!

def _simstring_classifier_template(feature_class):
    return SIMSTRING_CLASSIFIER_TEMPLATE.format(
            class_prefix=feature_class.__name__.replace(
                'SimStringFeature', ''),
            classifier_set=CLASSIFIER_SET,
            feature_class=feature_class.__name__
            )
    pass

def simstring_classifiers_module_template(feature_classes):
    return '''
    {warning}
    {hdr}
    {classifiers}
    '''.format(
            warning=GENERATED_WARNING_MESSAGE,
            hdr=SIMSTRING_CLASSIFIERS_HDR,
            classifiers='\n'.join(
                (_simstring_classifier_template(c) for c in feature_classes))
            ).strip()

def main(args):
    argp = ARGPARSER.parse_args(args[1:])
    if argp.target == 'features':
        print simstring_features_module_template(
                (basename(p) for p in SIMSTRING_DB_PATHS))
    elif argp.target == 'classifiers':
        from features import SIMSTRING_FEATURES
        print simstring_classifiers_module_template(SIMSTRING_FEATURES)
    return 0

if __name__ == '__main__':
    from sys import argv
    exit(main(argv))
